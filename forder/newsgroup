{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "1c3aa69e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.datasets import fetch_20newsgroups\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from keras.utils.np_utils import to_categorical\n",
    "from tensorflow.keras.layers import Dense, Input, Flatten\n",
    "from tensorflow.keras.layers import Conv1D, MaxPooling1D, Embedding, Dropout, Concatenate\n",
    "from tensorflow.keras.models import Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4cc46c9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pip install tqdm -> progressbar \n",
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b77e15f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['comp.sys.mac.hardware', 'rec.motorcycles', 'sci.electronics']\n",
      "1767\n"
     ]
    }
   ],
   "source": [
    "categories = ['comp.sys.mac.hardware', 'rec.motorcycles', 'sci.electronics']\n",
    "\n",
    "newsgroups_train = fetch_20newsgroups(subset='train', shuffle=True, categories=categories)\n",
    "\n",
    "print(newsgroups_train.target_names)\n",
    "print(len(newsgroups_train.data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "92349a01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[': |> In article <2514@tekgen.bv.tek.com> davet@interceptor.cds.tek.com (Dave Tharp CDS) writes:', ': |> >In article <1993Apr15.171757.10890@i88.isc.com> jeq@lachman.com (Jonathan E. Quist) writes:', ': |> >>Rolls-Royce owned by a non-British firm?', ': |> >>', ': |> >>Ye Gods, that would be the end of civilization as we know it.']\n"
     ]
    }
   ],
   "source": [
    "# print(newsgroups_train.data[0])\n",
    "print(newsgroups_train.data[0].split(\"\\n\")[10:15])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fddd99b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['data', 'filenames', 'target_names', 'target', 'DESCR'])\n"
     ]
    }
   ],
   "source": [
    "print(newsgroups_train.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3853cbfa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1767\n",
      "1767\n",
      "3\n",
      "1767\n"
     ]
    }
   ],
   "source": [
    "print(len(newsgroups_train.data))\n",
    "print(len(newsgroups_train.filenames))\n",
    "print(len(newsgroups_train.target_names))\n",
    "print(len(newsgroups_train.target))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2640c1dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['comp.sys.mac.hardware', 'rec.motorcycles', 'sci.electronics']\n"
     ]
    }
   ],
   "source": [
    "print(newsgroups_train.target_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1c9c3580",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'From: npet@bnr.ca (Nick Pettefar)\\nSubject: Re: Happy Easter!\\nNntp-Posting-Host: bmdhh299\\nOrganization: BNR Europe Ltd, Maidenhead, UK\\nX-Newsreader: TIN [version 1.1 PL8]\\nLines: 37\\n\\nkevinh, on the Tue, 20 Apr 1993 13:23:01 GMT wibbled:\\n\\n: In article <1993Apr19.154020.24818@i88.isc.com>, jeq@lachman.com (Jonathan E. Quist) writes:\\n: |> In article <2514@tekgen.bv.tek.com> davet@interceptor.cds.tek.com (Dave Tharp CDS) writes:\\n: |> >In article <1993Apr15.171757.10890@i88.isc.com> jeq@lachman.com (Jonathan E. Quist) writes:\\n: |> >>Rolls-Royce owned by a non-British firm?\\n: |> >>\\n: |> >>Ye Gods, that would be the end of civilization as we know it.\\n: |> >\\n: |> >  Why not?  Ford owns Aston-Martin and Jaguar, General Motors owns Lotus\\n: |> >and Vauxhall.  Rover is only owned 20% by Honda.\\n: |> \\n: |> Yes, it\\'s a minor blasphemy that U.S. companies would ?? on the likes of A.M.,\\n: |> Jaguar, or (sob) Lotus.  It\\'s outright sacrilege for RR to have non-British\\n: |> ownership.  It\\'s a fundamental thing\\n\\n\\n: I think there is a legal clause in the RR name, regardless of who owns it\\n: it must be a British company/owner - i.e. BA can sell the company but not\\n: the name.\\n\\n: kevinh@hasler.ascom.ch\\n\\nI don\\'t believe that BA have anything to do with RR.  It\\'s a seperate\\ncompany from the RR Aero-Engine company.  I think that the government\\nown a stake.  Unfortunately they owned a stake of Jaguar too, until\\nthey decided to make a quick buck and sold it to Ford.  Bastards.\\nThis is definitely the ultimate Arthur-Daley government.\\n--\\n\\nNick (the Cynical Biker)   DoD 1069   Concise Oxford   Leaky Gearbox\\n\\nM\\'Lud.\\n                                   \\nNick Pettefar, Contractor@Large.  /~~~\\\\   \"Teneo tuus intervallum\"\\nCuurrently incarcerated at BNR,  {-O^O-}   npet@bnr.ca  \\'86 BMW K100RS \"Kay\"\\nMaidenhead, The United Kingdom.   \\\\ o /    Pres. PBWASOH(UK),  BS 0002\\n'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newsgroups_train.data[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6044c362",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 418 ms, sys: 11.2 ms, total: 429 ms\n",
      "Wall time: 433 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "labels = newsgroups_train.target\n",
    "texts = newsgroups_train.data\n",
    "\n",
    "MAX_VOCAB_SIZE = 20000\n",
    "MAX_SEQUENCE_LENGTH = 1000\n",
    "\n",
    "tokenizer = Tokenizer(num_words = MAX_VOCAB_SIZE)\n",
    "tokenizer.fit_on_texts(texts)\n",
    "\n",
    "sequences = tokenizer.texts_to_sequences(texts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "801d70d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[12, 1265, 270, 70, 769, 1233, 20, 33, 1207, 4237]\n",
      "From: npet@bnr.ca (Nick Pettefar)\n",
      "Subject: Re: Happy Easter!\n",
      "Nntp-Posting-Host: bmdhh299\n",
      "Organization: BNR Europe Ltd, Maidenhead, UK\n",
      "X-Newsreader: TIN [version 1.1 PL8]\n",
      "Lines: 37\n",
      "\n",
      "kevinh, on the Tue, 20 Apr 1993 13:23:01 GMT wibbled:\n",
      "\n",
      ": In article <1993Apr19.154020.24818@i88.isc.com>, jeq@lachman.com (Jonathan E. Quist) writes:\n",
      ": |> In article <2514@tekgen.bv.tek.com> davet@interceptor.cds.tek.com (Dave Tharp CDS) writes:\n",
      ": |> >In article <1993Apr15.171757.10890@i88.isc.com> jeq@lachman.com (Jonathan E. Quist) writes:\n",
      ": |> >>Rolls-Royce owned by a non-British firm?\n",
      ": |> >>\n",
      ": |> >>Ye Gods, that would be the end of civilization as we know it.\n",
      ": |> >\n",
      ": |> >  Why not?  Ford owns Aston-Martin and Jaguar, General Motors owns Lotus\n",
      ": |> >and Vauxhall.  Rover is only owned 20% by Honda.\n",
      ": |> \n",
      ": |> Yes, it's a minor blasphemy that U.S. companies would ?? on the likes of A.M.,\n",
      ": |> Jaguar, or (sob) Lotus.  It's outright sacrilege for RR to have non-British\n",
      ": |> ownership.  It's a fundamental thing\n",
      "\n",
      "\n",
      ": I think there is a legal clause in the RR name, regardless of who owns it\n",
      ": it must be a British company/owner - i.e. BA can sell the company but not\n",
      ": the name.\n",
      "\n",
      ": kevinh@hasler.ascom.ch\n",
      "\n",
      "I don't believe that BA have anything to do with RR.  It's a seperate\n",
      "company from the RR Aero-Engine company.  I think that the government\n",
      "own a stake.  Unfortunately they owned a stake of Jaguar too, until\n",
      "they decided to make a quick buck and sold it to Ford.  Bastards.\n",
      "This is definitely the ultimate Arthur-Daley government.\n",
      "--\n",
      "\n",
      "Nick (the Cynical Biker)   DoD 1069   Concise Oxford   Leaky Gearbox\n",
      "\n",
      "M'Lud.\n",
      "                                   \n",
      "Nick Pettefar, Contractor@Large.  /~~~\\   \"Teneo tuus intervallum\"\n",
      "Cuurrently incarcerated at BNR,  {-O^O-}   npet@bnr.ca  '86 BMW K100RS \"Kay\"\n",
      "Maidenhead, The United Kingdom.   \\ o /    Pres. PBWASOH(UK),  BS 0002\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(sequences[0][:10])\n",
    "print(texts[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a1ab75e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique tokens: 25458\n"
     ]
    }
   ],
   "source": [
    "word_index = tokenizer.word_index\n",
    "print(\"Unique tokens:\", len(word_index))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "dde3d921",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pad_sequences(sequences, maxlen=MAX_SEQUENCE_LENGTH)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c50b52e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1767, 1000)\n",
      "[   0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
      "    0    0    0    0    0   12 1265  270   70  769 1233   20   33 1207\n",
      " 4237   52   47   49 3173   25  270 2009  999 1735  146  107  402  471\n",
      "  238   34   34 1052   21 1390 3928   15]\n"
     ]
    }
   ],
   "source": [
    "print(data.shape)\n",
    "print(data[0][680:730])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e40a6ed3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 1., 0.],\n",
       "       [0., 1., 0.],\n",
       "       [1., 0., 0.],\n",
       "       ...,\n",
       "       [0., 0., 1.],\n",
       "       [0., 0., 1.],\n",
       "       [0., 1., 0.]], dtype=float32)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels = to_categorical(np.array(labels))\n",
    "labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6e9d5f8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data shape: (1767, 1000)\n",
      "Label shape: (1767, 3)\n"
     ]
    }
   ],
   "source": [
    "print('Data shape:', data.shape)\n",
    "print('Label shape:', labels.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "128741bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1414, 1000)\n",
      "(1414, 3)\n",
      "Number of catrgories in traing and validation set \n",
      "[461. 468. 485.]\n",
      "[117. 130. 106.]\n"
     ]
    }
   ],
   "source": [
    "VALIDATION_SPLIT = 0.2\n",
    "\n",
    "indices = np.arange(data.shape[0])\n",
    "np.random.shuffle(indices) \n",
    "data = data[indices] \n",
    "labels = labels[indices] \n",
    "nb_validation_samples = int(VALIDATION_SPLIT * data.shape[0])\n",
    "\n",
    "x_train = data[:-nb_validation_samples] \n",
    "y_train = labels[:-nb_validation_samples] \n",
    "x_val = data[-nb_validation_samples:] \n",
    "y_val = labels[-nb_validation_samples:] \n",
    "\n",
    "print (x_train.shape)\n",
    "print (y_train.shape)\n",
    "\n",
    "print('Number of catrgories in traing and validation set ') \n",
    "print (y_train.sum(axis=0))\n",
    "print (y_val.sum(axis=0))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0f276eb6",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "400000it [00:08, 49788.08it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Words vectors: 400000\n",
      "CPU times: user 7.26 s, sys: 479 ms, total: 7.74 s\n",
      "Wall time: 8.06 s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "%%time \n",
    "embeddings_index = {}\n",
    "\n",
    "f = open('./dataset/glove.6B.100d.txt')\n",
    "for line in tqdm(f):\n",
    "    values = line.split(' ')\n",
    "    word = values[0] \n",
    "    coefs = np.asarray(values[1:], dtype='float32')\n",
    "    embeddings_index[word] = coefs\n",
    "f.close()\n",
    "\n",
    "print(\"Words vectors:\", len(embeddings_index))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "98c5b26c",
   "metadata": {},
   "outputs": [],
   "source": [
    "EMBEDDING_DIM = 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6c0e3a68",
   "metadata": {},
   "outputs": [],
   "source": [
    "embedding_matrix = np.random.random( (len(word_index) + 1, EMBEDDING_DIM) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "0fbe1fdf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.50024465, 0.80388921, 0.5931984 , ..., 0.58787749, 0.93015188,\n",
       "        0.97405285],\n",
       "       [0.00253457, 0.1729329 , 0.45253544, ..., 0.34453786, 0.71583253,\n",
       "        0.72815242],\n",
       "       [0.88704943, 0.96022487, 0.76463734, ..., 0.13395752, 0.64692382,\n",
       "        0.07377387],\n",
       "       ...,\n",
       "       [0.28304469, 0.90273375, 0.1349464 , ..., 0.58143097, 0.86816391,\n",
       "        0.30353272],\n",
       "       [0.63207368, 0.412328  , 0.0576017 , ..., 0.55340145, 0.47612609,\n",
       "        0.57795033],\n",
       "       [0.38626378, 0.71862963, 0.47176804, ..., 0.54557464, 0.15396644,\n",
       "        0.6526379 ]])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "embedding_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a0bdcd7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(25459, 100)\n"
     ]
    }
   ],
   "source": [
    "for word, i in word_index.items():\n",
    "    # embedding 된 단어를 glove.6B.100d에 존재하는지 검색\n",
    "    embedding_vector = embeddings_index.get(word)\n",
    "    if embedding_vector is not None:\n",
    "        embedding_matrix[i] = embedding_vector # glove.6B.100d의 벡터값을 embedding 단어에 지정\n",
    "\n",
    "print(embedding_matrix.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c5312af8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.50024465 0.80388921 0.5931984  0.82773873 0.35177734 0.4331415\n",
      " 0.35163963 0.26012097 0.64284493 0.22444825]\n"
     ]
    }
   ],
   "source": [
    "print(embedding_matrix[0][:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ced11e4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate a model\n",
    "convs = []\n",
    "filter_sizes = [3,4,5]\n",
    "\n",
    "embedding_layer = Embedding(len(word_index) + 1, EMBEDDING_DIM,\n",
    "                           weights=[embedding_matrix],\n",
    "                           input_length=MAX_SEQUENCE_LENGTH,\n",
    "                           trainable=False)\n",
    "\n",
    "sequence_input = Input(shape=(MAX_SEQUENCE_LENGTH,), dtype='int32')\n",
    "embedded_sequences = embedding_layer(sequence_input)\n",
    "\n",
    "# RNN, LSTM, GRU \n",
    "# DNN \n",
    "for filter_size in filter_sizes:\n",
    "    conv = Conv1D(filters=128, kernel_size=filter_size, activation='relu')(embedded_sequences)\n",
    "    pool = MaxPooling1D(5)(conv)\n",
    "    convs.append(pool)\n",
    "\n",
    "merged_convs = Concatenate(axis=1)(convs)\n",
    "\n",
    "conv1 = Conv1D(128, 5, activation='relu')(merged_convs)\n",
    "pool1 = MaxPooling1D(5)(conv1)\n",
    "conv2 = Conv1D(128, 5, activation='relu')(pool1)\n",
    "pool2 = MaxPooling1D(5)(conv2)\n",
    "flat = Flatten()(pool2)\n",
    "dense = Dense(128, activation='relu')(flat)\n",
    "preds = Dense(3, activation='softmax')(dense)\n",
    "\n",
    "model = Model(sequence_input, preds)\n",
    "\n",
    "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['acc'])\n",
    "\n",
    "model.summary()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93fbc706",
   "metadata": {},
   "outputs": [],
   "source": [
    "r = model.fit(x_train, y_train, validation_data=(x_val, y_val), epochs=10, batch_size=128)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "4e7e689f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(5,3))\n",
    "plt.plot(r.history['loss'], marker='.', label='train')\n",
    "plt.plot(r.history['val_loss'], marker='.', label='validation')\n",
    "plt.title('Loss')\n",
    "plt.grid(True)\n",
    "plt.xlabel('epochs')\n",
    "plt.ylabel('loss')\n",
    "plt.legend(loc='best')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(5,3))\n",
    "plt.plot(r.history['acc'], marker='.', label='train')\n",
    "plt.plot(r.history['val_acc'], marker='.', label='validation')\n",
    "plt.title('Accuracy')\n",
    "plt.grid(True)\n",
    "plt.xlabel('epocs')\n",
    "plt.ylabel('loss')\n",
    "plt.legend(loc='best')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e8a2bc2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
